{"ast":null,"code":"var _jsxFileName = \"/home/dennies/Development/code/phase-2/Bot-code-challenge/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BotCollection from './BotCollection';\nimport YourBotArmy from './YourBotArmy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]);\n  useEffect(() => {\n    // Fetch bots from the backend API\n    fetch('http://localhost:3000/bots').then(response => response.json()).then(data => setBots(data.bots)).catch(error => console.error('Error fetching bots:', error));\n  }, []); // Empty dependency array ensures this effect runs once after the initial render\n\n  // Rest of your component code for enlisting, releasing, and discharging bots\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      enlistBot: enlistBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n      army: army,\n      releaseBot: releaseBot,\n      dischargeBot: dischargeBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"68vvBV/GRPK97Mw+lesffEpDxCY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","jsxDEV","_jsxDEV","App","_s","bots","setBots","army","setArmy","fetch","then","response","json","data","catch","error","console","className","children","enlistBot","fileName","_jsxFileName","lineNumber","columnNumber","releaseBot","dischargeBot","_c","$RefreshReg$"],"sources":["/home/dennies/Development/code/phase-2/Bot-code-challenge/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BotCollection from './BotCollection';\nimport YourBotArmy from './YourBotArmy';\n\nconst App = () => {\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]);\n\n  useEffect(() => {\n    // Fetch bots from the backend API\n    fetch('http://localhost:3000/bots')\n      .then(response => response.json())\n      .then(data => setBots(data.bots))\n      .catch(error => console.error('Error fetching bots:', error));\n  }, []); // Empty dependency array ensures this effect runs once after the initial render\n\n  // Rest of your component code for enlisting, releasing, and discharging bots\n\n  return (\n    <div className=\"App\">\n      <BotCollection bots={bots} enlistBot={enlistBot} />\n      <YourBotArmy army={army} releaseBot={releaseBot} dischargeBot={dischargeBot} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd;IACAW,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,OAAO,CAACO,IAAI,CAACR,IAAI,CAAC,CAAC,CAChCS,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;;EAEA,oBACEb,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA,CAACH,aAAa;MAACM,IAAI,EAAEA,IAAK;MAACc,SAAS,EAAEA;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnDrB,OAAA,CAACF,WAAW;MAACO,IAAI,EAAEA,IAAK;MAACiB,UAAU,EAAEA,UAAW;MAACC,YAAY,EAAEA;IAAa;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AAEV,CAAC;AAACnB,EAAA,CApBID,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAsBT,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}